<!DOCTYPE html>
<html ng-app="app">
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/buttons.css">
    <link rel="stylesheet" href="/styles/calendar.css">
    <link rel="stylesheet" href="/styles/forms.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/profile.css">
    <link rel="stylesheet" href="/styles/stats.css">
    <link rel="stylesheet" href="/styles/styles.css">
    <link rel="stylesheet" href="/styles/trix.css">
    <!--STYLES END-->
  </head>

  <body ng-cloak>

  <nav class="navbar navbar-inverse" >
    <div class="container-fluid">
      <div class="navbar-header">
        <a href="/">
          <img src="/images/Mathematica.png" width="50px" style="margin-left: 10px">
        </a>
      </div>
      <ul class="nav navbar-nav" >
        <% if(req.session.authenticated) { %>
        <li><a  class="change-text" href="/register/profile?link=panel-1">Add method</a></li>
        <li><a  class="change-text" href="/register/profile?link=panel-2">My method</a></li>
        <li><a  class="change-text" href="/register/profile?link=panel-3">Settings</a></li>
        <% if(req.session.User.role === 'admin') { %>
          <li><a  class="change-text" href="/register/profile?link=panel-4">List</a></li>
        <% } %>
        <% } %>
      </ul>
      <ul class="nav navbar-nav navbar-right" style="padding-right: 40px">
        <% if(req.session.authenticated) { %>
        <li><a href="/register/logout"><span class="glyphicon glyphicon-log-out"></span> Logout</a></li>
        <% }else { %>
        <li><a href="/register/sign-up"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>
         <li><a href="/register/sign-in"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
        <% } %>
      </ul>
    </div>
  </nav>


    <%- body %>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.js"></script>
    <script src="/js/dependencies/jquery.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/controller/homeCtrl.js"></script>
    <script src="/js/controller/profileCtrl.js"></script>
    <script src="/js/controller/signInCtrl.js"></script>
    <script src="/js/controller/signUpCtrl.js"></script>
    <script src="/js/repository/methodRepository.js"></script>
    <script src="/js/repository/registerRepository.js"></script>
    <script src="/js/repository/verificationRepository.js"></script>
    <script src="/js/utility/angular-file-upload.min.js"></script>
    <script src="/js/utility/angular-sanitize.js"></script>
    <script src="/js/utility/angular-trix.js"></script>
    <script src="/js/utility/bootstrap.js"></script>
    <script src="/js/utility/custom.js"></script>
    <script src="/js/utility/indicator.js"></script>
    <script src="/js/utility/trix.js"></script>
    <script src="/js/utility/validation.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
